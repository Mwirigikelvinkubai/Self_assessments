{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kelvin\\\\OneDrive\\\\Desktop\\\\Code\\\\Development\\\\self-assessments\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport assessmentsData from \"../data/assessments.json\";\nimport questionsData from \"../data/questions.json\";\nimport \"./Assessment.css\"; // keep styles here\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  var _questionsData$select2;\n  const [selectedAssessment, setSelectedAssessment] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [showQuiz, setShowQuiz] = useState(false);\n  const handleStart = assessmentKey => {\n    setSelectedAssessment(assessmentKey);\n    setCurrentQuestionIndex(0);\n    setAnswers({});\n    setShowQuiz(true);\n  };\n  const handleClose = () => {\n    setShowQuiz(false);\n    setSelectedAssessment(null);\n    setCurrentQuestionIndex(0);\n    setAnswers({});\n  };\n  const handleAnswer = (questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  };\n  const handleNext = () => {\n    var _questionsData$select;\n    const questions = ((_questionsData$select = questionsData[selectedAssessment]) === null || _questionsData$select === void 0 ? void 0 : _questionsData$select.questions) || [];\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      alert(\"Assessment completed! ✅\");\n      handleClose();\n    }\n  };\n  const questions = ((_questionsData$select2 = questionsData[selectedAssessment]) === null || _questionsData$select2 === void 0 ? void 0 : _questionsData$select2.questions) || [];\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-title\",\n      children: \"Assessments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: Object.entries(assessmentsData).map(([key, assessment]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${selectedAssessment === key ? \"active\" : \"\"}`,\n        onClick: () => handleStart(key),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: assessment.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: assessment.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), showQuiz && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-overlay\",\n      onClick: handleClose,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-modal rotating-border-slow\",\n        onClick: e => e.stopPropagation(),\n        children: currentQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"question-text\",\n            children: currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `option-btn ${answers[currentQuestion.id] === option ? \"selected\" : \"\"}`,\n              onClick: () => handleAnswer(currentQuestion.id, option),\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quiz-actions\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleNext,\n              className: \"next-btn\",\n              children: currentQuestionIndex < questions.length - 1 ? \"Next →\" : \"Finish ✅\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No questions available for this assessment.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"/ZsQbkPU07iGXEhJuTNGTdAT/v4=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","assessmentsData","questionsData","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","_s","_questionsData$select2","selectedAssessment","setSelectedAssessment","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","showQuiz","setShowQuiz","handleStart","assessmentKey","handleClose","handleAnswer","questionId","answer","prev","handleNext","_questionsData$select","questions","length","alert","currentQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","key","assessment","onClick","title","description","e","stopPropagation","question","options","option","index","id","_c","$RefreshReg$"],"sources":["C:/Users/Kelvin/OneDrive/Desktop/Code/Development/self-assessments/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport assessmentsData from \"../data/assessments.json\";\r\nimport questionsData from \"../data/questions.json\";\r\nimport \"./Assessment.css\"; // keep styles here\r\n\r\nconst Quiz = () => {\r\n  const [selectedAssessment, setSelectedAssessment] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [showQuiz, setShowQuiz] = useState(false);\r\n\r\n  const handleStart = (assessmentKey) => {\r\n    setSelectedAssessment(assessmentKey);\r\n    setCurrentQuestionIndex(0);\r\n    setAnswers({});\r\n    setShowQuiz(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShowQuiz(false);\r\n    setSelectedAssessment(null);\r\n    setCurrentQuestionIndex(0);\r\n    setAnswers({});\r\n  };\r\n\r\n  const handleAnswer = (questionId, answer) => {\r\n    setAnswers((prev) => ({ ...prev, [questionId]: answer }));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const questions = questionsData[selectedAssessment]?.questions || [];\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex((prev) => prev + 1);\r\n    } else {\r\n      alert(\"Assessment completed! ✅\");\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const questions = questionsData[selectedAssessment]?.questions || [];\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"assessment-page\">\r\n      <h1 className=\"page-title\">Assessments</h1>\r\n      <div className=\"card-grid\">\r\n        {Object.entries(assessmentsData).map(([key, assessment]) => (\r\n          <div\r\n            key={key}\r\n            className={`card ${selectedAssessment === key ? \"active\" : \"\"}`}\r\n            onClick={() => handleStart(key)}\r\n          >\r\n            <h2>{assessment.title}</h2>\r\n            <p>{assessment.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Quiz Modal */}\r\n      {showQuiz && (\r\n        <div className=\"quiz-overlay\" onClick={handleClose}>\r\n          <div\r\n            className=\"quiz-modal rotating-border-slow\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            {currentQuestion ? (\r\n              <>\r\n                <h2 className=\"question-text\">{currentQuestion.question}</h2>\r\n                <div className=\"options\">\r\n                  {currentQuestion.options.map((option, index) => (\r\n                    <button\r\n                      key={index}\r\n                      className={`option-btn ${\r\n                        answers[currentQuestion.id] === option ? \"selected\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleAnswer(currentQuestion.id, option)}\r\n                    >\r\n                      {option}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n                <div className=\"quiz-actions\">\r\n                  <button onClick={handleNext} className=\"next-btn\">\r\n                    {currentQuestionIndex < questions.length - 1\r\n                      ? \"Next →\"\r\n                      : \"Finish ✅\"}\r\n                  </button>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <p>No questions available for this assessment.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}